Review ConferenceEvent.jsx structure
You have two working modules:
- The landing page with a button to get started and a company description.
- The "venue section" includes room selection in the venue and increment and decrement buttons.
Open the ConferenceEvent.jsx file in the src directory. This component includes functions and layouts for the product selection page.

Layouts of ConferenceEvent.jsx
- A navbar bar element
- The main_container class in a <div> tag
- A showItems variable to toggle functionality using the conditional operator ? :
- The items-information class in a <div> tag
- Layouts for venue, addons, and meals in <div> tags. Each of these layouts has two common class names: 
venue_container and container_main
- A total_amount_detail class in a <div> tag to display the details of selected items


Review venue module code
Focus on the state flow and how the ConferenceEvent component works in conjunction with the venueSlice. 
The venue room selection functionality code is in three files: venueSlice.js, ConferenceEvent.jsx, and store.js. 
Let's discuss the code in these and the interactions among them.
The venue functionality uses slices from the Redux toolkit by importing the createSlice() function. 
A slice breaks down your application state into smaller features, helping organize your code, making it easier to read and 
simpler to maintain.

venueSlice.js:
Let's step through the code in the venueSlice.js file. It contains code to slice the Redux state related to venue selection 
using createSlice from @reduxjs/toolkit.
1. The initial state consists of an array of venue objects, each representing a rentable room in the venue. 
A venue object has properties such as the thumbnail image, name, cost, and quantity.
2. The venueSlice.js file includes reducer functions incrementQuantity and decrementQuantity to manage the number of 
venue items in the state.
- Note: On the last page of this lab, we provide you with the links for images from Pixabay, with appropriate citations, 
or you may find your own.
3. incrementQuantity():
- This function handles incrementing the quantity of a venue item in the state. It receives an action containing the index of 
the item to be incremented.
- It first checks if the item exists in the state at the provided index. If the item exists and it's an Auditorium Hall with 
a quantity greater than or equal to 3, it returns early without modifying the state.
- Otherwise, it increments the quantity of the item by one.
4. decrementQuantity():
- This function handles decrementing the quantity of a venue item in the state. It receives an action containing the index of the 
item to be decremented.
- It first checks if the item exists in the state at the provided index and if its quantity is greater than 0.
- If both conditions are met, the quantity of the item will be decreased by one.

Code

reducers: {
    incrementQuantity: (state, action) => {
      const { payload: index } = action;
      if (state[index]) {
        if (state[index].name === "Auditorium Hall (Capacity:200)" && state[index].quantity >= 3) {
          return;        }
        state[index].quantity++;
      }
    },
    decrementQuantity: (state, action) => {
      const { payload: index } = action;
      if (state[index] && state[index].quantity > 0) {
        state[index].quantity--;
      }
    },
  },



Redux Store Setup
Now we'll look at the store.js file.
1. Create the Redux store with the configureStore() function from @reduxjs/toolkit
2. The store.js file contains a reducer called venue(), imported from venueSlice.js

code 

import { configureStore } from '@reduxjs/toolkit';
import venueReducer from './venueSlice';
export default configureStore({
    reducer: {
        venue: venueReducer,
    },
});

3. This code creates a global Redux store using the @reduxjs/toolkit\ configureStore() function so all components in the 
application can access the state managed by the venueReducer().


ConferenceEvent Component
Now let's walkthrough the relevant code from the ConferenceEvent.jsx file.
1. First, import the required dependencies.

code

import { useSelector, useDispatch } from "react-redux";
import { incrementQuantity, decrementQuantity } from "./venueSlice";

2. The useSelector() function retrieves venue items from the Redux store state.

code 

const venueItems = useSelector((state) => state.venue);

3. It then defines event handlers like handleAddToCart(), and handleRemoveFromCart() to manage the increase and decrease 
quantities from the user interactions.

code

const handleAddToCart = (index) => {
    if (venueItems[index].name === "Auditorium Hall (Capacity:200)" && venueItems[index].quantity >= 3) {
        return; // Prevent further additions
    }
    dispatch(incrementQuantity(index));
};
const handleRemoveFromCart = (index) => {
    if (venueItems[index].quantity > 0) {
        dispatch(decrementQuantity(index));
    }
};


4. Next, it calculates the remaining number of available auditorium halls to three, so the user cannot request more than three.

code

const remainingAuditoriumQuantity = 3 - venueItems.find(item => item.name === "Auditorium Hall (Capacity:200)").quantity;

5. When the user selects the buttons to increase or decrease the number of rooms, the system should calculate the cost 
for all selected rooms.
6. For this, we define a calculateTotalCost() function and declare a venueTotalCost.

code

const calculateTotalCost = (section) => {
    let totalCost = 0;
    if (section === "venue") {
        venueItems.forEach((item) => {
            totalCost += item.cost * item.quantity;
        });
    }
    return totalCost;
};
const venueTotalCost = calculateTotalCost("venue");

7. Function declaration:
- The function is defined using arrow function syntax and assigned to the constant calculateTotalCost.
- It takes one string parameter, section, that indicates the section is calculated.
8. Initialization of totalCost:
- The totalCost variable is initialized to 0. This value will hold the cumulative total cost for the specified section.
9. Conditional check:
- The function checks if the section passed as an argument equals the string "venue".
- If true, the total cost for the venue items will be calculated.
10. Iteration over venueItems:
- The venueItems items array represents an item with properties cost and quantity.
- The forEach function iterates over each item in the venueItems array. For each item, it multiplies item.cost 
by item.quantity and adds the result to totalCost.
11. Return statement:
- After the loop is complete, the function returns the calculated totalCost.
12. Function call:
- The function calculateTotalCost is called with the "venue" argument, which calculates the total cost for the items in 
the "venue" section.
- The result of this calculation is stored in the constant venueTotalCost.
13. Lastly, the component displays the total cost of all selected venue items.

code 

<div className="total_cost">Total Cost: ${venueTotalCost}</div>



Code for add-ons
Now, it's your turn to write some code. In this section, you will create the add-ons section. To begin, you 
need to first create logic within avSlice.js under the src folder.
1. Initialize the initialState array variable with objects to provide a data structure. Note that you need to add your 
own images and the appropriate paths to them in the data below. Links to sample images are provided in Task 1: Setting up the environment. Include the code below within initialState of avSlice.js.

code

    {
        img: "https://pixabay.com/images/download/business-20031_640.jpg",
        name: "Projectors",
        cost: 200,
        quantity: 0,
    },
    {
        img: "https://pixabay.com/images/download/speakers-4109274_640.jpg",
        name: "Speaker",
        cost: 35,
        quantity: 0,
    },
    {
        img: "https://pixabay.com/images/download/public-speaking-3926344_640.jpg",
        name: "Microphones",
        cost: 45,
        quantity: 0,
    },
    {
        img: "https://pixabay.com/images/download/whiteboard-2903269_640.png",
        name: "Whiteboards",
        cost: 80,
        quantity: 0,
    },

    {
        img: "https://pixabay.com/images/download/signpost-235079_640.jpg",
        name: "Signage",
        cost: 80,
        quantity: 0,
    },



Increment and decrement
- Now, you need to create the logic for incrementAvQuantity() and decrementAvQuantity() functions.
1. The incrementAvQuantity() reducer function increments the quantity of a specific item in the state.
2. It takes two parameters: state and action.
3. The action.payload object contains the identifier of the item to increment.
4. The reducer retrieves the item from the state using state[action.payload].
5. If the item exists, it increments its quantity property by 1.
